{
    "sourceFile": "lecture_alert/accounts/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1736632412177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736633924853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,14 +51,13 @@\n \r\n # ADMIN VIEWING TIMETABLE\r\n def view_timetable(request, lecturer_id):\r\n     lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n-    timetable = Timetable.objects.filter(lecturer=lecturer)  # Adjust based on your model\r\n-    context = {\r\n+    timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n+    return render(request, 'accounts/timetable.html', {\r\n         'lecturer': lecturer,\r\n-        'timetable': timetable,\r\n-    }\r\n-    return render(request, 'accounts/timetable.html', context)\r\n+        'timetables': timetables\r\n+    })\r\n \r\n def add_timetable(request):\r\n     if request.method == 'POST':\r\n         lecturer_id = request.user.id  # Assuming logged-in user is the lecturer\r\n"
                },
                {
                    "date": 1736633936261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n def all_lecturers(request):\r\n     lecturers = Lecturer.objects.all()\r\n     return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n \r\n-# ADMIN VIEWING TIMETABLE\r\n+# ADMIN VIEWING TIMETABLE \r\n def view_timetable(request, lecturer_id):\r\n     lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n     timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n     return render(request, 'accounts/timetable.html', {\r\n"
                },
                {
                    "date": 1736633942221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n def all_lecturers(request):\r\n     lecturers = Lecturer.objects.all()\r\n     return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n \r\n-# ADMIN VIEWING TIMETABLE \r\n+# ADMIN VIEWING TIMETABLE FROM ADMIN DASH\r\n def view_timetable(request, lecturer_id):\r\n     lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n     timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n     return render(request, 'accounts/timetable.html', {\r\n"
                },
                {
                    "date": 1736634307990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,28 @@\n         )\r\n         return redirect('timetable')\r\n     return render(request, 'accounts/add_timetable.html')\r\n \r\n-def edit_timetable(request):\r\n-    return render(request, 'accounts/edit_timetable.html')\r\n+def edit_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    if request.method == 'POST':\r\n+        # Update timetable\r\n+        timetable.department = request.POST['department']\r\n+        timetable.course = request.POST['course']\r\n+        timetable.date = request.POST['date']\r\n+        timetable.start_time = request.POST['start_time']\r\n+        timetable.end_time = request.POST['end_time']\r\n+        timetable.venue = request.POST['venue']\r\n+        timetable.save()\r\n+        return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n+    return render(request, 'accounts/edit_timetable.html', {'timetable': timetable})\r\n \r\n+def delete_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    lecturer_id = timetable.lecturer.id\r\n+    timetable.delete()\r\n+    return redirect('view_timetable', lecturer_id=lecturer_id)\r\n+\r\n def lecturer_view(request):\r\n     return render(request, 'accounts/lecturer_dashboard.html')\r\n \r\n # REGISTRATION LOGIC\r\n"
                },
                {
                    "date": 1736634694553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+# /F:/Lecture_alert/lecture_alert/accounts/views.py\r\n+from django.shortcuts import render, redirect, get_object_or_404\r\n+from django.contrib import messages\r\n+from django.contrib.auth import authenticate, login\r\n+from django.views.decorators.csrf import ensure_csrf_cookie\r\n+from .forms import UserLoginForm, UserRegistrationForm\r\n+from .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\n+from django.contrib.auth.hashers import make_password, check_password\r\n+from django.db import transaction\r\n+from django.http import JsonResponse\r\n+\r\n+# LOGIN LOGIC\r\n+def login_view(request):\r\n+    if request.method == 'POST':\r\n+        print(\"Form submission received.\")\r\n+        form = UserLoginForm(request.POST)\r\n+        if form.is_valid():\r\n+            username = form.cleaned_data['username']\r\n+            role = form.cleaned_data['role']\r\n+            password = form.cleaned_data['password']\r\n+            \r\n+            try:\r\n+                if role == 'Admin':\r\n+                    user = Admin.objects.get(username=username)\r\n+                else:\r\n+                    user = Lecturer.objects.get(username=username)\r\n+                    \r\n+                if check_password(password, user.password):\r\n+                    return redirect('admin_dashboard' if role == 'Admin' else 'lecturer_dashboard')\r\n+                else:\r\n+                    form.add_error(None, 'Invalid credentials')\r\n+            except (Admin.DoesNotExist, Lecturer.DoesNotExist):\r\n+                form.add_error(None, 'Invalid credentials')\r\n+        else:\r\n+            print(\"Form is not valid.\")\r\n+            print(form.errors)\r\n+    else:\r\n+        form = UserLoginForm()\r\n+        \r\n+    return render(request, 'accounts/login.html', {'form': form})\r\n+\r\n+def admin_view(request):\r\n+    return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+def edit_view(request):\r\n+    return render(request, 'accounts/edit_lecturer.html')\r\n+#  ALL LECTURERS TABLE\r\n+def all_lecturers(request):\r\n+    lecturers = Lecturer.objects.all()\r\n+    return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n+\r\n+# ADMIN VIEWING TIMETABLE FROM ADMIN DASHBOARD\r\n+def view_timetable(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n+    return render(request, 'accounts/timetable.html', {\r\n+        'lecturer': lecturer,\r\n+        'timetables': timetables\r\n+    })\r\n+\r\n+def add_timetable(request, lecturer_id=None):\r\n+    if request.method == 'POST':\r\n+        lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+        timetable = Timetable.objects.create(\r\n+            lecturer=lecturer,\r\n+            department=request.POST['department'],\r\n+            course=request.POST['course'],\r\n+            date=request.POST['date'],\r\n+            start_time=request.POST['start_time'],\r\n+            end_time=request.POST['end_time'],\r\n+            venue=request.POST['venue']\r\n+        )\r\n+        return redirect('view_timetable', lecturer_id=lecturer.id)\r\n+    return render(request, 'accounts/add_timetable.html')\r\n+\r\n+def edit_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    if request.method == 'POST':\r\n+        # Update timetable\r\n+        timetable.department = request.POST['department']\r\n+        timetable.course = request.POST['course']\r\n+        timetable.date = request.POST['date']\r\n+        timetable.start_time = request.POST['start_time']\r\n+        timetable.end_time = request.POST['end_time']\r\n+        timetable.venue = request.POST['venue']\r\n+        timetable.save()\r\n+        return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n+    return render(request, 'accounts/edit_timetable.html', {'timetable': timetable})\r\n+\r\n+def delete_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    lecturer_id = timetable.lecturer.id\r\n+    timetable.delete()\r\n+    return redirect('view_timetable', lecturer_id=lecturer_id)\r\n+\r\n+def lecturer_view(request):\r\n+    return render(request, 'accounts/lecturer_dashboard.html')\r\n+\r\n+# REGISTRATION LOGIC\r\n+\r\n+def register(request):\r\n+    if request.method == 'POST':\r\n+        print(\"Form submission received.\")\r\n+        \r\n+        # Get form data\r\n+        data = {\r\n+            'email': request.POST.get('email'),\r\n+            'username': request.POST.get('username'),\r\n+            'fullname': request.POST.get('fullname'),\r\n+            'phone': request.POST.get('phone'),\r\n+            'role': request.POST.get('role'),\r\n+            'password': request.POST.get('password')\r\n+        }\r\n+        \r\n+        # Validate required fields\r\n+        required_fields = ['email', 'username', 'fullname', 'password', 'role']\r\n+        if not all(data.get(field) for field in required_fields):\r\n+            messages.error(request, 'All fields are required')\r\n+            return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+        try:\r\n+            if data['role'] == 'Admin':\r\n+                admin = Admin.objects.create(\r\n+                    email=data['email'],\r\n+                    username=data['username'],\r\n+                    fullname=data['fullname'],\r\n+                    phone=data['phone'],\r\n+                    password=make_password(data['password'])\r\n+                )\r\n+                messages.success(request, 'Admin created successfully')\r\n+            else:\r\n+                lecturer = Lecturer.objects.create(\r\n+                    email=data['email'],\r\n+                    username=data['username'],\r\n+                    fullname=data['fullname'],\r\n+                    phone=data['phone'],\r\n+                    department=request.POST.get('department'),\r\n+                    courses=request.POST.get('courses'),\r\n+                    password=make_password(data['password'])\r\n+                )\r\n+                messages.success(request, 'Lecturer created successfully')\r\n+            \r\n+            return redirect('admin_dashboard')\r\n+            \r\n+        except Exception as e:\r\n+            messages.error(request, str(e))\r\n+            \r\n+    return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+def lecturer_dashboard(request):\r\n+    return render(request, 'accounts/lecturer_dashboard.html')\r\n+# RETRIEVING ALL LECTURERS FOR ADMIN LANDING PAGE\r\n+@ensure_csrf_cookie\r\n+def admin_dashboard(request):\r\n+    lecturers = Lecturer.objects.all()\r\n+    return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n"
                },
                {
                    "date": 1736635794505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,13 @@\n     return render(request, 'accounts/add_timetable.html')\r\n \r\n def edit_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    if request.method == 'GET':\r\n+        return render(request, 'accounts/edit_timetable.html', {\r\n+            'timetable': timetable,\r\n+            'department_value': timetable.department\r\n+        })\r\n     if request.method == 'POST':\r\n         # Update timetable\r\n         timetable.department = request.POST['department']\r\n         timetable.course = request.POST['course']\r\n"
                },
                {
                    "date": 1736638339270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,11 @@\n         'lecturer': lecturer,\r\n         'timetables': timetables\r\n     })\r\n \r\n-def add_timetable(request, lecturer_id=None):\r\n+def add_timetable(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n     if request.method == 'POST':\r\n-        lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n         timetable = Timetable.objects.create(\r\n             lecturer=lecturer,\r\n             department=request.POST['department'],\r\n             course=request.POST['course'],\r\n@@ -70,9 +70,9 @@\n             end_time=request.POST['end_time'],\r\n             venue=request.POST['venue']\r\n         )\r\n         return redirect('view_timetable', lecturer_id=lecturer.id)\r\n-    return render(request, 'accounts/add_timetable.html')\r\n+    return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n \r\n def edit_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n     if request.method == 'GET':\r\n@@ -158,160 +158,4 @@\n @ensure_csrf_cookie\r\n def admin_dashboard(request):\r\n     lecturers = Lecturer.objects.all()\r\n     return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n-# /F:/Lecture_alert/lecture_alert/accounts/views.py\r\n-from django.shortcuts import render, redirect, get_object_or_404\r\n-from django.contrib import messages\r\n-from django.contrib.auth import authenticate, login\r\n-from django.views.decorators.csrf import ensure_csrf_cookie\r\n-from .forms import UserLoginForm, UserRegistrationForm\r\n-from .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\n-from django.contrib.auth.hashers import make_password, check_password\r\n-from django.db import transaction\r\n-from django.http import JsonResponse\r\n-\r\n-# LOGIN LOGIC\r\n-def login_view(request):\r\n-    if request.method == 'POST':\r\n-        print(\"Form submission received.\")\r\n-        form = UserLoginForm(request.POST)\r\n-        if form.is_valid():\r\n-            username = form.cleaned_data['username']\r\n-            role = form.cleaned_data['role']\r\n-            password = form.cleaned_data['password']\r\n-            \r\n-            try:\r\n-                if role == 'Admin':\r\n-                    user = Admin.objects.get(username=username)\r\n-                else:\r\n-                    user = Lecturer.objects.get(username=username)\r\n-                    \r\n-                if check_password(password, user.password):\r\n-                    return redirect('admin_dashboard' if role == 'Admin' else 'lecturer_dashboard')\r\n-                else:\r\n-                    form.add_error(None, 'Invalid credentials')\r\n-            except (Admin.DoesNotExist, Lecturer.DoesNotExist):\r\n-                form.add_error(None, 'Invalid credentials')\r\n-        else:\r\n-            print(\"Form is not valid.\")\r\n-            print(form.errors)\r\n-    else:\r\n-        form = UserLoginForm()\r\n-        \r\n-    return render(request, 'accounts/login.html', {'form': form})\r\n-\r\n-def admin_view(request):\r\n-    return render(request, 'accounts/admin_dashboard.html')\r\n-\r\n-def edit_view(request):\r\n-    return render(request, 'accounts/edit_lecturer.html')\r\n-#  ALL LECTURERS TABLE\r\n-def all_lecturers(request):\r\n-    lecturers = Lecturer.objects.all()\r\n-    return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n-\r\n-# ADMIN VIEWING TIMETABLE FROM ADMIN DASH\r\n-def view_timetable(request, lecturer_id):\r\n-    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n-    timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n-    return render(request, 'accounts/timetable.html', {\r\n-        'lecturer': lecturer,\r\n-        'timetables': timetables\r\n-    })\r\n-\r\n-def add_timetable(request):\r\n-    if request.method == 'POST':\r\n-        lecturer_id = request.user.id  # Assuming logged-in user is the lecturer\r\n-        timetable = Timetable.objects.create(\r\n-            lecturer_id=lecturer_id,\r\n-            department=request.POST['department'],\r\n-            course=request.POST['course'],\r\n-            date=request.POST['date'],\r\n-            start_time=request.POST['start_time'],\r\n-            end_time=request.POST['end_time'],\r\n-            venue=request.POST['venue']\r\n-        )\r\n-        return redirect('timetable')\r\n-    return render(request, 'accounts/add_timetable.html')\r\n-\r\n-def edit_timetable(request, timetable_id):\r\n-    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n-    if request.method == 'POST':\r\n-        # Update timetable\r\n-        timetable.department = request.POST['department']\r\n-        timetable.course = request.POST['course']\r\n-        timetable.date = request.POST['date']\r\n-        timetable.start_time = request.POST['start_time']\r\n-        timetable.end_time = request.POST['end_time']\r\n-        timetable.venue = request.POST['venue']\r\n-        timetable.save()\r\n-        return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n-    return render(request, 'accounts/edit_timetable.html', {'timetable': timetable})\r\n-\r\n-def delete_timetable(request, timetable_id):\r\n-    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n-    lecturer_id = timetable.lecturer.id\r\n-    timetable.delete()\r\n-    return redirect('view_timetable', lecturer_id=lecturer_id)\r\n-\r\n-def lecturer_view(request):\r\n-    return render(request, 'accounts/lecturer_dashboard.html')\r\n-\r\n-# REGISTRATION LOGIC\r\n-\r\n-def register(request):\r\n-    if request.method == 'POST':\r\n-        print(\"Form submission received.\")\r\n-        \r\n-        # Get form data\r\n-        data = {\r\n-            'email': request.POST.get('email'),\r\n-            'username': request.POST.get('username'),\r\n-            'fullname': request.POST.get('fullname'),\r\n-            'phone': request.POST.get('phone'),\r\n-            'role': request.POST.get('role'),\r\n-            'password': request.POST.get('password')\r\n-        }\r\n-        \r\n-        # Validate required fields\r\n-        required_fields = ['email', 'username', 'fullname', 'password', 'role']\r\n-        if not all(data.get(field) for field in required_fields):\r\n-            messages.error(request, 'All fields are required')\r\n-            return render(request, 'accounts/admin_dashboard.html')\r\n-\r\n-        try:\r\n-            if data['role'] == 'Admin':\r\n-                admin = Admin.objects.create(\r\n-                    email=data['email'],\r\n-                    username=data['username'],\r\n-                    fullname=data['fullname'],\r\n-                    phone=data['phone'],\r\n-                    password=make_password(data['password'])\r\n-                )\r\n-                messages.success(request, 'Admin created successfully')\r\n-            else:\r\n-                lecturer = Lecturer.objects.create(\r\n-                    email=data['email'],\r\n-                    username=data['username'],\r\n-                    fullname=data['fullname'],\r\n-                    phone=data['phone'],\r\n-                    department=request.POST.get('department'),\r\n-                    courses=request.POST.get('courses'),\r\n-                    password=make_password(data['password'])\r\n-                )\r\n-                messages.success(request, 'Lecturer created successfully')\r\n-            \r\n-            return redirect('admin_dashboard')\r\n-            \r\n-        except Exception as e:\r\n-            messages.error(request, str(e))\r\n-            \r\n-    return render(request, 'accounts/admin_dashboard.html')\r\n-\r\n-def lecturer_dashboard(request):\r\n-    return render(request, 'accounts/lecturer_dashboard.html')\r\n-# RETRIEVING ALL LECTURERS FOR ADMIN LANDING PAGE\r\n-@ensure_csrf_cookie\r\n-def admin_dashboard(request):\r\n-    lecturers = Lecturer.objects.all()\r\n-    return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n"
                },
                {
                    "date": 1736683951412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,24 +74,27 @@\n     return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n \r\n def edit_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n-    if request.method == 'GET':\r\n-        return render(request, 'accounts/edit_timetable.html', {\r\n-            'timetable': timetable,\r\n-            'department_value': timetable.department\r\n-        })\r\n+    \r\n     if request.method == 'POST':\r\n-        # Update timetable\r\n-        timetable.department = request.POST['department']\r\n-        timetable.course = request.POST['course']\r\n-        timetable.date = request.POST['date']\r\n-        timetable.start_time = request.POST['start_time']\r\n-        timetable.end_time = request.POST['end_time']\r\n-        timetable.venue = request.POST['venue']\r\n-        timetable.save()\r\n-        return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n-    return render(request, 'accounts/edit_timetable.html', {'timetable': timetable})\r\n+        try:\r\n+            timetable.department = request.POST['department']\r\n+            timetable.course = request.POST['course']\r\n+            timetable.date = request.POST['date']\r\n+            timetable.start_time = request.POST['start_time']\r\n+            timetable.end_time = request.POST['end_time']\r\n+            timetable.venue = request.POST['venue']\r\n+            timetable.save()\r\n+            \r\n+            messages.success(request, 'Timetable updated successfully')\r\n+            return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n+        except Exception as e:\r\n+            messages.error(request, f'Error updating timetable: {str(e)}')\r\n+            \r\n+    return render(request, 'accounts/edit_timetable.html', {\r\n+        'timetable': timetable\r\n+    })\r\n \r\n def delete_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n     lecturer_id = timetable.lecturer.id\r\n"
                },
                {
                    "date": 1736683958233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,10 @@\n         )\r\n         return redirect('view_timetable', lecturer_id=lecturer.id)\r\n     return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n \r\n+\r\n+EDI\r\n def edit_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n     \r\n     if request.method == 'POST':\r\n"
                },
                {
                    "date": 1736683964398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         return redirect('view_timetable', lecturer_id=lecturer.id)\r\n     return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n \r\n \r\n-EDI\r\n+EDITI\r\n def edit_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n     \r\n     if request.method == 'POST':\r\n"
                },
                {
                    "date": 1736683972996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+# /F:/Lecture_alert/lecture_alert/accounts/views.py\r\n+from django.shortcuts import render, redirect, get_object_or_404\r\n+from django.contrib import messages\r\n+from django.contrib.auth import authenticate, login\r\n+from django.views.decorators.csrf import ensure_csrf_cookie\r\n+from .forms import UserLoginForm, UserRegistrationForm\r\n+from .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\n+from django.contrib.auth.hashers import make_password, check_password\r\n+from django.db import transaction\r\n+from django.http import JsonResponse\r\n+\r\n+# LOGIN LOGIC\r\n+def login_view(request):\r\n+    if request.method == 'POST':\r\n+        print(\"Form submission received.\")\r\n+        form = UserLoginForm(request.POST)\r\n+        if form.is_valid():\r\n+            username = form.cleaned_data['username']\r\n+            role = form.cleaned_data['role']\r\n+            password = form.cleaned_data['password']\r\n+            \r\n+            try:\r\n+                if role == 'Admin':\r\n+                    user = Admin.objects.get(username=username)\r\n+                else:\r\n+                    user = Lecturer.objects.get(username=username)\r\n+                    \r\n+                if check_password(password, user.password):\r\n+                    return redirect('admin_dashboard' if role == 'Admin' else 'lecturer_dashboard')\r\n+                else:\r\n+                    form.add_error(None, 'Invalid credentials')\r\n+            except (Admin.DoesNotExist, Lecturer.DoesNotExist):\r\n+                form.add_error(None, 'Invalid credentials')\r\n+        else:\r\n+            print(\"Form is not valid.\")\r\n+            print(form.errors)\r\n+    else:\r\n+        form = UserLoginForm()\r\n+        \r\n+    return render(request, 'accounts/login.html', {'form': form})\r\n+\r\n+def admin_view(request):\r\n+    return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+def edit_view(request):\r\n+    return render(request, 'accounts/edit_lecturer.html')\r\n+#  ALL LECTURERS TABLE\r\n+def all_lecturers(request):\r\n+    lecturers = Lecturer.objects.all()\r\n+    return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n+\r\n+# ADMIN VIEWING TIMETABLE FROM ADMIN DASHBOARD\r\n+def view_timetable(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n+    return render(request, 'accounts/timetable.html', {\r\n+        'lecturer': lecturer,\r\n+        'timetables': timetables\r\n+    })\r\n+\r\n+def add_timetable(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    if request.method == 'POST':\r\n+        timetable = Timetable.objects.create(\r\n+            lecturer=lecturer,\r\n+            department=request.POST['department'],\r\n+            course=request.POST['course'],\r\n+            date=request.POST['date'],\r\n+            start_time=request.POST['start_time'],\r\n+            end_time=request.POST['end_time'],\r\n+            venue=request.POST['venue']\r\n+        )\r\n+        return redirect('view_timetable', lecturer_id=lecturer.id)\r\n+    return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n+\r\n+\r\n+# EDITING TIMETABLE\r\n+def edit_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    \r\n+    if request.method == 'POST':\r\n+        try:\r\n+            timetable.department = request.POST['department']\r\n+            timetable.course = request.POST['course']\r\n+            timetable.date = request.POST['date']\r\n+            timetable.start_time = request.POST['start_time']\r\n+            timetable.end_time = request.POST['end_time']\r\n+            timetable.venue = request.POST['venue']\r\n+            timetable.save()\r\n+            \r\n+            messages.success(request, 'Timetable updated successfully')\r\n+            return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n+        except Exception as e:\r\n+            messages.error(request, f'Error updating timetable: {str(e)}')\r\n+            \r\n+    return render(request, 'accounts/edit_timetable.html', {\r\n+        'timetable': timetable\r\n+    })\r\n+\r\n+def delete_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    lecturer_id = timetable.lecturer.id\r\n+    timetable.delete()\r\n+    return redirect('view_timetable', lecturer_id=lecturer_id)\r\n+\r\n+def lecturer_view(request):\r\n+    return render(request, 'accounts/lecturer_dashboard.html')\r\n+\r\n+# REGISTRATION LOGIC\r\n+\r\n+def register(request):\r\n+    if request.method == 'POST':\r\n+        print(\"Form submission received.\")\r\n+        \r\n+        # Get form data\r\n+        data = {\r\n+            'email': request.POST.get('email'),\r\n+            'username': request.POST.get('username'),\r\n+            'fullname': request.POST.get('fullname'),\r\n+            'phone': request.POST.get('phone'),\r\n+            'role': request.POST.get('role'),\r\n+            'password': request.POST.get('password')\r\n+        }\r\n+        \r\n+        # Validate required fields\r\n+        required_fields = ['email', 'username', 'fullname', 'password', 'role']\r\n+        if not all(data.get(field) for field in required_fields):\r\n+            messages.error(request, 'All fields are required')\r\n+            return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+        try:\r\n+            if data['role'] == 'Admin':\r\n+                admin = Admin.objects.create(\r\n+                    email=data['email'],\r\n+                    username=data['username'],\r\n+                    fullname=data['fullname'],\r\n+                    phone=data['phone'],\r\n+                    password=make_password(data['password'])\r\n+                )\r\n+                messages.success(request, 'Admin created successfully')\r\n+            else:\r\n+                lecturer = Lecturer.objects.create(\r\n+                    email=data['email'],\r\n+                    username=data['username'],\r\n+                    fullname=data['fullname'],\r\n+                    phone=data['phone'],\r\n+                    department=request.POST.get('department'),\r\n+                    courses=request.POST.get('courses'),\r\n+                    password=make_password(data['password'])\r\n+                )\r\n+                messages.success(request, 'Lecturer created successfully')\r\n+            \r\n+            return redirect('admin_dashboard')\r\n+            \r\n+        except Exception as e:\r\n+            messages.error(request, str(e))\r\n+            \r\n+    return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+def lecturer_dashboard(request):\r\n+    return render(request, 'accounts/lecturer_dashboard.html')\r\n+# RETRIEVING ALL LECTURERS FOR ADMIN LANDING PAGE\r\n+@ensure_csrf_cookie\r\n+def admin_dashboard(request):\r\n+    lecturers = Lecturer.objects.all()\r\n+    return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n"
                },
                {
                    "date": 1736684206448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,17 @@\n \r\n # EDITING TIMETABLE\r\n def edit_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    departments = {\r\n+        'Agriculture and Environmental Sciences': 'Agriculture and Environmental Sciences',\r\n+        'Business, Economics and Tourism': 'Business, Economics and Tourism',\r\n+        'Education & Lifelong Learning': 'Education & Lifelong Learning',\r\n+        'Engineering and Architecture': 'Engineering and Architecture',\r\n+        'Health Sciences': 'Health Sciences',\r\n+        'Law': 'Law',\r\n+        'Pure And Applied Sciences': 'Pure And Applied Sciences'\r\n+    }\r\n     \r\n     if request.method == 'POST':\r\n         try:\r\n             timetable.department = request.POST['department']\r\n@@ -86,182 +95,15 @@\n             timetable.start_time = request.POST['start_time']\r\n             timetable.end_time = request.POST['end_time']\r\n             timetable.venue = request.POST['venue']\r\n             timetable.save()\r\n-            \r\n-            messages.success(request, 'Timetable updated successfully')\r\n             return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n         except Exception as e:\r\n-            messages.error(request, f'Error updating timetable: {str(e)}')\r\n-            \r\n-    return render(request, 'accounts/edit_timetable.html', {\r\n-        'timetable': timetable\r\n-    })\r\n-\r\n-def delete_timetable(request, timetable_id):\r\n-    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n-    lecturer_id = timetable.lecturer.id\r\n-    timetable.delete()\r\n-    return redirect('view_timetable', lecturer_id=lecturer_id)\r\n-\r\n-def lecturer_view(request):\r\n-    return render(request, 'accounts/lecturer_dashboard.html')\r\n-\r\n-# REGISTRATION LOGIC\r\n-\r\n-def register(request):\r\n-    if request.method == 'POST':\r\n-        print(\"Form submission received.\")\r\n-        \r\n-        # Get form data\r\n-        data = {\r\n-            'email': request.POST.get('email'),\r\n-            'username': request.POST.get('username'),\r\n-            'fullname': request.POST.get('fullname'),\r\n-            'phone': request.POST.get('phone'),\r\n-            'role': request.POST.get('role'),\r\n-            'password': request.POST.get('password')\r\n-        }\r\n-        \r\n-        # Validate required fields\r\n-        required_fields = ['email', 'username', 'fullname', 'password', 'role']\r\n-        if not all(data.get(field) for field in required_fields):\r\n-            messages.error(request, 'All fields are required')\r\n-            return render(request, 'accounts/admin_dashboard.html')\r\n-\r\n-        try:\r\n-            if data['role'] == 'Admin':\r\n-                admin = Admin.objects.create(\r\n-                    email=data['email'],\r\n-                    username=data['username'],\r\n-                    fullname=data['fullname'],\r\n-                    phone=data['phone'],\r\n-                    password=make_password(data['password'])\r\n-                )\r\n-                messages.success(request, 'Admin created successfully')\r\n-            else:\r\n-                lecturer = Lecturer.objects.create(\r\n-                    email=data['email'],\r\n-                    username=data['username'],\r\n-                    fullname=data['fullname'],\r\n-                    phone=data['phone'],\r\n-                    department=request.POST.get('department'),\r\n-                    courses=request.POST.get('courses'),\r\n-                    password=make_password(data['password'])\r\n-                )\r\n-                messages.success(request, 'Lecturer created successfully')\r\n-            \r\n-            return redirect('admin_dashboard')\r\n-            \r\n-        except Exception as e:\r\n             messages.error(request, str(e))\r\n-            \r\n-    return render(request, 'accounts/admin_dashboard.html')\r\n \r\n-def lecturer_dashboard(request):\r\n-    return render(request, 'accounts/lecturer_dashboard.html')\r\n-# RETRIEVING ALL LECTURERS FOR ADMIN LANDING PAGE\r\n-@ensure_csrf_cookie\r\n-def admin_dashboard(request):\r\n-    lecturers = Lecturer.objects.all()\r\n-    return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n-# /F:/Lecture_alert/lecture_alert/accounts/views.py\r\n-from django.shortcuts import render, redirect, get_object_or_404\r\n-from django.contrib import messages\r\n-from django.contrib.auth import authenticate, login\r\n-from django.views.decorators.csrf import ensure_csrf_cookie\r\n-from .forms import UserLoginForm, UserRegistrationForm\r\n-from .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\n-from django.contrib.auth.hashers import make_password, check_password\r\n-from django.db import transaction\r\n-from django.http import JsonResponse\r\n-\r\n-# LOGIN LOGIC\r\n-def login_view(request):\r\n-    if request.method == 'POST':\r\n-        print(\"Form submission received.\")\r\n-        form = UserLoginForm(request.POST)\r\n-        if form.is_valid():\r\n-            username = form.cleaned_data['username']\r\n-            role = form.cleaned_data['role']\r\n-            password = form.cleaned_data['password']\r\n-            \r\n-            try:\r\n-                if role == 'Admin':\r\n-                    user = Admin.objects.get(username=username)\r\n-                else:\r\n-                    user = Lecturer.objects.get(username=username)\r\n-                    \r\n-                if check_password(password, user.password):\r\n-                    return redirect('admin_dashboard' if role == 'Admin' else 'lecturer_dashboard')\r\n-                else:\r\n-                    form.add_error(None, 'Invalid credentials')\r\n-            except (Admin.DoesNotExist, Lecturer.DoesNotExist):\r\n-                form.add_error(None, 'Invalid credentials')\r\n-        else:\r\n-            print(\"Form is not valid.\")\r\n-            print(form.errors)\r\n-    else:\r\n-        form = UserLoginForm()\r\n-        \r\n-    return render(request, 'accounts/login.html', {'form': form})\r\n-\r\n-def admin_view(request):\r\n-    return render(request, 'accounts/admin_dashboard.html')\r\n-\r\n-def edit_view(request):\r\n-    return render(request, 'accounts/edit_lecturer.html')\r\n-#  ALL LECTURERS TABLE\r\n-def all_lecturers(request):\r\n-    lecturers = Lecturer.objects.all()\r\n-    return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n-\r\n-# ADMIN VIEWING TIMETABLE FROM ADMIN DASHBOARD\r\n-def view_timetable(request, lecturer_id):\r\n-    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n-    timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n-    return render(request, 'accounts/timetable.html', {\r\n-        'lecturer': lecturer,\r\n-        'timetables': timetables\r\n-    })\r\n-\r\n-def add_timetable(request, lecturer_id):\r\n-    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n-    if request.method == 'POST':\r\n-        timetable = Timetable.objects.create(\r\n-            lecturer=lecturer,\r\n-            department=request.POST['department'],\r\n-            course=request.POST['course'],\r\n-            date=request.POST['date'],\r\n-            start_time=request.POST['start_time'],\r\n-            end_time=request.POST['end_time'],\r\n-            venue=request.POST['venue']\r\n-        )\r\n-        return redirect('view_timetable', lecturer_id=lecturer.id)\r\n-    return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n-\r\n-\r\n-EDITI\r\n-def edit_timetable(request, timetable_id):\r\n-    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n-    \r\n-    if request.method == 'POST':\r\n-        try:\r\n-            timetable.department = request.POST['department']\r\n-            timetable.course = request.POST['course']\r\n-            timetable.date = request.POST['date']\r\n-            timetable.start_time = request.POST['start_time']\r\n-            timetable.end_time = request.POST['end_time']\r\n-            timetable.venue = request.POST['venue']\r\n-            timetable.save()\r\n-            \r\n-            messages.success(request, 'Timetable updated successfully')\r\n-            return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n-        except Exception as e:\r\n-            messages.error(request, f'Error updating timetable: {str(e)}')\r\n-            \r\n     return render(request, 'accounts/edit_timetable.html', {\r\n-        'timetable': timetable\r\n+        'timetable': timetable,\r\n+        'departments': departments\r\n     })\r\n \r\n def delete_timetable(request, timetable_id):\r\n     timetable = get_object_or_404(Timetable, id=timetable_id)\r\n"
                },
                {
                    "date": 1736717909147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,22 +85,8 @@\n         'Health Sciences': 'Health Sciences',\r\n         'Law': 'Law',\r\n         'Pure And Applied Sciences': 'Pure And Applied Sciences'\r\n     }\r\n-    \r\n-    if request.method == 'POST':\r\n-        try:\r\n-            timetable.department = request.POST['department']\r\n-            timetable.course = request.POST['course']\r\n-            timetable.date = request.POST['date']\r\n-            timetable.start_time = request.POST['start_time']\r\n-            timetable.end_time = request.POST['end_time']\r\n-            timetable.venue = request.POST['venue']\r\n-            timetable.save()\r\n-            return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n-        except Exception as e:\r\n-            messages.error(request, str(e))\r\n-\r\n     return render(request, 'accounts/edit_timetable.html', {\r\n         'timetable': timetable,\r\n         'departments': departments\r\n     })\r\n"
                },
                {
                    "date": 1736717982458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,22 @@\n         'Health Sciences': 'Health Sciences',\r\n         'Law': 'Law',\r\n         'Pure And Applied Sciences': 'Pure And Applied Sciences'\r\n     }\r\n+    \r\n+    if request.method == 'POST':\r\n+        try:\r\n+            timetable.department = request.POST['department']\r\n+            timetable.course = request.POST['course']\r\n+            timetable.date = request.POST['date']\r\n+            timetable.start_time = request.POST['start_time']\r\n+            timetable.end_time = request.POST['end_time']\r\n+            timetable.venue = request.POST['venue']\r\n+            timetable.save()\r\n+            return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n+        except Exception as e:\r\n+            messages.error(request, str(e))\r\n+\r\n     return render(request, 'accounts/edit_timetable.html', {\r\n         'timetable': timetable,\r\n         'departments': departments\r\n     })\r\n"
                },
                {
                    "date": 1736718636879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n from .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\n from django.contrib.auth.hashers import make_password, check_password\r\n from django.db import transaction\r\n from django.http import JsonResponse\r\n+from django.views.decorators.http import require_POST\r\n \r\n # LOGIN LOGIC\r\n def login_view(request):\r\n     if request.method == 'POST':\r\n@@ -171,4 +172,14 @@\n @ensure_csrf_cookie\r\n def admin_dashboard(request):\r\n     lecturers = Lecturer.objects.all()\r\n     return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n+\r\n+@require_POST\r\n+def delete_lecturer(request, lecturer_id):\r\n+    try:\r\n+        lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+        lecturer.delete()  # This will cascade delete related timetables\r\n+        messages.success(request, f'Lecturer {lecturer.fullname} deleted successfully')\r\n+        return JsonResponse({'status': 'success'})\r\n+    except Exception as e:\r\n+        return JsonResponse({'status': 'error', 'message': str(e)})\r\n"
                },
                {
                    "date": 1736718991917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,10 +176,9 @@\n \r\n @require_POST\r\n def delete_lecturer(request, lecturer_id):\r\n     try:\r\n-        lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n-        lecturer.delete()  # This will cascade delete related timetables\r\n-        messages.success(request, f'Lecturer {lecturer.fullname} deleted successfully')\r\n+        lecturer = Lecturer.objects.get(id=lecturer_id)\r\n+        lecturer.delete()\r\n         return JsonResponse({'status': 'success'})\r\n-    except Exception as e:\r\n-        return JsonResponse({'status': 'error', 'message': str(e)})\r\n+    except Lecturer.DoesNotExist:\r\n+        return JsonResponse({'status': 'error', 'message': 'Lecturer not found'}, status=404)\r\n"
                },
                {
                    "date": 1736720499017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,4 +181,36 @@\n         lecturer.delete()\r\n         return JsonResponse({'status': 'success'})\r\n     except Lecturer.DoesNotExist:\r\n         return JsonResponse({'status': 'error', 'message': 'Lecturer not found'}, status=404)\r\n+\r\n+def edit_lecturer(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    \r\n+    if request.method == 'POST':\r\n+        try:\r\n+            lecturer.fullname = request.POST['fullname']\r\n+            lecturer.email = request.POST['email']\r\n+            lecturer.phone = request.POST['phone']\r\n+            lecturer.department = request.POST['department']\r\n+            lecturer.courses = request.POST['course']\r\n+            lecturer.save()\r\n+            \r\n+            messages.success(request, 'Lecturer updated successfully')\r\n+            return redirect('admin_dashboard')\r\n+        except Exception as e:\r\n+            messages.error(request, f'Error updating lecturer: {str(e)}')\r\n+    \r\n+    departments = {\r\n+        'Agriculture and Environmental Sciences': 'Agriculture and Environmental Sciences',\r\n+        'Business, Economics and Tourism': 'Business, Economics and Tourism',\r\n+        'Education & Lifelong Learning': 'Education & Lifelong Learning',\r\n+        'Engineering and Architecture': 'Engineering and Architecture',\r\n+        'Health Sciences': 'Health Sciences',\r\n+        'Law': 'Law',\r\n+        'Pure And Applied Sciences': 'Pure And Applied Sciences'\r\n+    }\r\n+    \r\n+    return render(request, 'accounts/edit_lecturer.html', {\r\n+        'lecturer': lecturer,\r\n+        'departments': departments\r\n+    })\r\n"
                },
                {
                    "date": 1736720507246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n         lecturer.delete()\r\n         return JsonResponse({'status': 'success'})\r\n     except Lecturer.DoesNotExist:\r\n         return JsonResponse({'status': 'error', 'message': 'Lecturer not found'}, status=404)\r\n-EDIT \r\n+EDIT L\r\n def edit_lecturer(request, lecturer_id):\r\n     lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n     \r\n     if request.method == 'POST':\r\n"
                },
                {
                    "date": 1736720516028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+# /F:/Lecture_alert/lecture_alert/accounts/views.py\r\n+from django.shortcuts import render, redirect, get_object_or_404\r\n+from django.contrib import messages\r\n+from django.contrib.auth import authenticate, login\r\n+from django.views.decorators.csrf import ensure_csrf_cookie\r\n+from .forms import UserLoginForm, UserRegistrationForm\r\n+from .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\n+from django.contrib.auth.hashers import make_password, check_password\r\n+from django.db import transaction\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.http import require_POST\r\n+\r\n+# LOGIN LOGIC\r\n+def login_view(request):\r\n+    if request.method == 'POST':\r\n+        print(\"Form submission received.\")\r\n+        form = UserLoginForm(request.POST)\r\n+        if form.is_valid():\r\n+            username = form.cleaned_data['username']\r\n+            role = form.cleaned_data['role']\r\n+            password = form.cleaned_data['password']\r\n+            \r\n+            try:\r\n+                if role == 'Admin':\r\n+                    user = Admin.objects.get(username=username)\r\n+                else:\r\n+                    user = Lecturer.objects.get(username=username)\r\n+                    \r\n+                if check_password(password, user.password):\r\n+                    return redirect('admin_dashboard' if role == 'Admin' else 'lecturer_dashboard')\r\n+                else:\r\n+                    form.add_error(None, 'Invalid credentials')\r\n+            except (Admin.DoesNotExist, Lecturer.DoesNotExist):\r\n+                form.add_error(None, 'Invalid credentials')\r\n+        else:\r\n+            print(\"Form is not valid.\")\r\n+            print(form.errors)\r\n+    else:\r\n+        form = UserLoginForm()\r\n+        \r\n+    return render(request, 'accounts/login.html', {'form': form})\r\n+\r\n+def admin_view(request):\r\n+    return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+def edit_view(request):\r\n+    return render(request, 'accounts/edit_lecturer.html')\r\n+#  ALL LECTURERS TABLE\r\n+def all_lecturers(request):\r\n+    lecturers = Lecturer.objects.all()\r\n+    return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n+\r\n+# ADMIN VIEWING TIMETABLE FROM ADMIN DASHBOARD\r\n+def view_timetable(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    timetables = Timetable.objects.filter(lecturer=lecturer).order_by('date', 'start_time')\r\n+    return render(request, 'accounts/timetable.html', {\r\n+        'lecturer': lecturer,\r\n+        'timetables': timetables\r\n+    })\r\n+\r\n+def add_timetable(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    if request.method == 'POST':\r\n+        timetable = Timetable.objects.create(\r\n+            lecturer=lecturer,\r\n+            department=request.POST['department'],\r\n+            course=request.POST['course'],\r\n+            date=request.POST['date'],\r\n+            start_time=request.POST['start_time'],\r\n+            end_time=request.POST['end_time'],\r\n+            venue=request.POST['venue']\r\n+        )\r\n+        return redirect('view_timetable', lecturer_id=lecturer.id)\r\n+    return render(request, 'accounts/add_timetable.html', {'lecturer': lecturer})\r\n+\r\n+\r\n+# EDITING TIMETABLE\r\n+def edit_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    departments = {\r\n+        'Agriculture and Environmental Sciences': 'Agriculture and Environmental Sciences',\r\n+        'Business, Economics and Tourism': 'Business, Economics and Tourism',\r\n+        'Education & Lifelong Learning': 'Education & Lifelong Learning',\r\n+        'Engineering and Architecture': 'Engineering and Architecture',\r\n+        'Health Sciences': 'Health Sciences',\r\n+        'Law': 'Law',\r\n+        'Pure And Applied Sciences': 'Pure And Applied Sciences'\r\n+    }\r\n+    \r\n+    if request.method == 'POST':\r\n+        try:\r\n+            timetable.department = request.POST['department']\r\n+            timetable.course = request.POST['course']\r\n+            timetable.date = request.POST['date']\r\n+            timetable.start_time = request.POST['start_time']\r\n+            timetable.end_time = request.POST['end_time']\r\n+            timetable.venue = request.POST['venue']\r\n+            timetable.save()\r\n+            return redirect('view_timetable', lecturer_id=timetable.lecturer.id)\r\n+        except Exception as e:\r\n+            messages.error(request, str(e))\r\n+\r\n+    return render(request, 'accounts/edit_timetable.html', {\r\n+        'timetable': timetable,\r\n+        'departments': departments\r\n+    })\r\n+\r\n+def delete_timetable(request, timetable_id):\r\n+    timetable = get_object_or_404(Timetable, id=timetable_id)\r\n+    lecturer_id = timetable.lecturer.id\r\n+    timetable.delete()\r\n+    return redirect('view_timetable', lecturer_id=lecturer_id)\r\n+\r\n+def lecturer_view(request):\r\n+    return render(request, 'accounts/lecturer_dashboard.html')\r\n+\r\n+# REGISTRATION LOGIC\r\n+\r\n+def register(request):\r\n+    if request.method == 'POST':\r\n+        print(\"Form submission received.\")\r\n+        \r\n+        # Get form data\r\n+        data = {\r\n+            'email': request.POST.get('email'),\r\n+            'username': request.POST.get('username'),\r\n+            'fullname': request.POST.get('fullname'),\r\n+            'phone': request.POST.get('phone'),\r\n+            'role': request.POST.get('role'),\r\n+            'password': request.POST.get('password')\r\n+        }\r\n+        \r\n+        # Validate required fields\r\n+        required_fields = ['email', 'username', 'fullname', 'password', 'role']\r\n+        if not all(data.get(field) for field in required_fields):\r\n+            messages.error(request, 'All fields are required')\r\n+            return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+        try:\r\n+            if data['role'] == 'Admin':\r\n+                admin = Admin.objects.create(\r\n+                    email=data['email'],\r\n+                    username=data['username'],\r\n+                    fullname=data['fullname'],\r\n+                    phone=data['phone'],\r\n+                    password=make_password(data['password'])\r\n+                )\r\n+                messages.success(request, 'Admin created successfully')\r\n+            else:\r\n+                lecturer = Lecturer.objects.create(\r\n+                    email=data['email'],\r\n+                    username=data['username'],\r\n+                    fullname=data['fullname'],\r\n+                    phone=data['phone'],\r\n+                    department=request.POST.get('department'),\r\n+                    courses=request.POST.get('courses'),\r\n+                    password=make_password(data['password'])\r\n+                )\r\n+                messages.success(request, 'Lecturer created successfully')\r\n+            \r\n+            return redirect('admin_dashboard')\r\n+            \r\n+        except Exception as e:\r\n+            messages.error(request, str(e))\r\n+            \r\n+    return render(request, 'accounts/admin_dashboard.html')\r\n+\r\n+def lecturer_dashboard(request):\r\n+    return render(request, 'accounts/lecturer_dashboard.html')\r\n+# RETRIEVING ALL LECTURERS FOR ADMIN LANDING PAGE\r\n+@ensure_csrf_cookie\r\n+def admin_dashboard(request):\r\n+    lecturers = Lecturer.objects.all()\r\n+    return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n+\r\n+@require_POST\r\n+def delete_lecturer(request, lecturer_id):\r\n+    try:\r\n+        lecturer = Lecturer.objects.get(id=lecturer_id)\r\n+        lecturer.delete()\r\n+        return JsonResponse({'status': 'success'})\r\n+    except Lecturer.DoesNotExist:\r\n+        return JsonResponse({'status': 'error', 'message': 'Lecturer not found'}, status=404)\r\n+\r\n+# EDIT LECTURER\r\n+def edit_lecturer(request, lecturer_id):\r\n+    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n+    \r\n+    if request.method == 'POST':\r\n+        try:\r\n+            lecturer.fullname = request.POST['fullname']\r\n+            lecturer.email = request.POST['email']\r\n+            lecturer.phone = request.POST['phone']\r\n+            lecturer.department = request.POST['department']\r\n+            lecturer.courses = request.POST['course']\r\n+            lecturer.save()\r\n+            \r\n+            messages.success(request, 'Lecturer updated successfully')\r\n+            return redirect('admin_dashboard')\r\n+        except Exception as e:\r\n+            messages.error(request, f'Error updating lecturer: {str(e)}')\r\n+    \r\n+    departments = {\r\n+        'Agriculture and Environmental Sciences': 'Agriculture and Environmental Sciences',\r\n+        'Business, Economics and Tourism': 'Business, Economics and Tourism',\r\n+        'Education & Lifelong Learning': 'Education & Lifelong Learning',\r\n+        'Engineering and Architecture': 'Engineering and Architecture',\r\n+        'Health Sciences': 'Health Sciences',\r\n+        'Law': 'Law',\r\n+        'Pure And Applied Sciences': 'Pure And Applied Sciences'\r\n+    }\r\n+    \r\n+    return render(request, 'accounts/edit_lecturer.html', {\r\n+        'lecturer': lecturer,\r\n+        'departments': departments\r\n+    })\r\n"
                }
            ],
            "date": 1736632412177,
            "name": "Commit-0",
            "content": "# /F:/Lecture_alert/lecture_alert/accounts/views.py\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.contrib import messages\r\nfrom django.contrib.auth import authenticate, login\r\nfrom django.views.decorators.csrf import ensure_csrf_cookie\r\nfrom .forms import UserLoginForm, UserRegistrationForm\r\nfrom .models import Admin, Lecturer, Timetable  # Remove CustomUser import\r\nfrom django.contrib.auth.hashers import make_password, check_password\r\nfrom django.db import transaction\r\nfrom django.http import JsonResponse\r\n\r\n# LOGIN LOGIC\r\ndef login_view(request):\r\n    if request.method == 'POST':\r\n        print(\"Form submission received.\")\r\n        form = UserLoginForm(request.POST)\r\n        if form.is_valid():\r\n            username = form.cleaned_data['username']\r\n            role = form.cleaned_data['role']\r\n            password = form.cleaned_data['password']\r\n            \r\n            try:\r\n                if role == 'Admin':\r\n                    user = Admin.objects.get(username=username)\r\n                else:\r\n                    user = Lecturer.objects.get(username=username)\r\n                    \r\n                if check_password(password, user.password):\r\n                    return redirect('admin_dashboard' if role == 'Admin' else 'lecturer_dashboard')\r\n                else:\r\n                    form.add_error(None, 'Invalid credentials')\r\n            except (Admin.DoesNotExist, Lecturer.DoesNotExist):\r\n                form.add_error(None, 'Invalid credentials')\r\n        else:\r\n            print(\"Form is not valid.\")\r\n            print(form.errors)\r\n    else:\r\n        form = UserLoginForm()\r\n        \r\n    return render(request, 'accounts/login.html', {'form': form})\r\n\r\ndef admin_view(request):\r\n    return render(request, 'accounts/admin_dashboard.html')\r\n\r\ndef edit_view(request):\r\n    return render(request, 'accounts/edit_lecturer.html')\r\n#  ALL LECTURERS TABLE\r\ndef all_lecturers(request):\r\n    lecturers = Lecturer.objects.all()\r\n    return render(request, 'accounts/all_lecturers.html', {'lecturers': lecturers})\r\n\r\n# ADMIN VIEWING TIMETABLE\r\ndef view_timetable(request, lecturer_id):\r\n    lecturer = get_object_or_404(Lecturer, id=lecturer_id)\r\n    timetable = Timetable.objects.filter(lecturer=lecturer)  # Adjust based on your model\r\n    context = {\r\n        'lecturer': lecturer,\r\n        'timetable': timetable,\r\n    }\r\n    return render(request, 'accounts/timetable.html', context)\r\n\r\ndef add_timetable(request):\r\n    if request.method == 'POST':\r\n        lecturer_id = request.user.id  # Assuming logged-in user is the lecturer\r\n        timetable = Timetable.objects.create(\r\n            lecturer_id=lecturer_id,\r\n            department=request.POST['department'],\r\n            course=request.POST['course'],\r\n            date=request.POST['date'],\r\n            start_time=request.POST['start_time'],\r\n            end_time=request.POST['end_time'],\r\n            venue=request.POST['venue']\r\n        )\r\n        return redirect('timetable')\r\n    return render(request, 'accounts/add_timetable.html')\r\n\r\ndef edit_timetable(request):\r\n    return render(request, 'accounts/edit_timetable.html')\r\n\r\ndef lecturer_view(request):\r\n    return render(request, 'accounts/lecturer_dashboard.html')\r\n\r\n# REGISTRATION LOGIC\r\n\r\ndef register(request):\r\n    if request.method == 'POST':\r\n        print(\"Form submission received.\")\r\n        \r\n        # Get form data\r\n        data = {\r\n            'email': request.POST.get('email'),\r\n            'username': request.POST.get('username'),\r\n            'fullname': request.POST.get('fullname'),\r\n            'phone': request.POST.get('phone'),\r\n            'role': request.POST.get('role'),\r\n            'password': request.POST.get('password')\r\n        }\r\n        \r\n        # Validate required fields\r\n        required_fields = ['email', 'username', 'fullname', 'password', 'role']\r\n        if not all(data.get(field) for field in required_fields):\r\n            messages.error(request, 'All fields are required')\r\n            return render(request, 'accounts/admin_dashboard.html')\r\n\r\n        try:\r\n            if data['role'] == 'Admin':\r\n                admin = Admin.objects.create(\r\n                    email=data['email'],\r\n                    username=data['username'],\r\n                    fullname=data['fullname'],\r\n                    phone=data['phone'],\r\n                    password=make_password(data['password'])\r\n                )\r\n                messages.success(request, 'Admin created successfully')\r\n            else:\r\n                lecturer = Lecturer.objects.create(\r\n                    email=data['email'],\r\n                    username=data['username'],\r\n                    fullname=data['fullname'],\r\n                    phone=data['phone'],\r\n                    department=request.POST.get('department'),\r\n                    courses=request.POST.get('courses'),\r\n                    password=make_password(data['password'])\r\n                )\r\n                messages.success(request, 'Lecturer created successfully')\r\n            \r\n            return redirect('admin_dashboard')\r\n            \r\n        except Exception as e:\r\n            messages.error(request, str(e))\r\n            \r\n    return render(request, 'accounts/admin_dashboard.html')\r\n\r\ndef lecturer_dashboard(request):\r\n    return render(request, 'accounts/lecturer_dashboard.html')\r\n# RETRIEVING ALL LECTURERS FOR ADMIN LANDING PAGE\r\n@ensure_csrf_cookie\r\ndef admin_dashboard(request):\r\n    lecturers = Lecturer.objects.all()\r\n    return render(request, 'accounts/admin_dashboard.html', {'lecturers': lecturers})\r\n"
        }
    ]
}